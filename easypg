#!/usr/bin/env python3

import subprocess
import argparse
import random
import string

DOCKER_CONTAINER_NAME = "easypg_container"
DOCKER_VOLUME_NAME = "easypg_data"


def run_docker_psql_command(command, user="postgres", password="postgres"):
    """Run psql commands within a Docker container."""
    docker_command = [
        "docker",
        "exec",
        "-e",
        f"PGPASSWORD={password}",
        "-u",
        user,
        DOCKER_CONTAINER_NAME,
        "psql",
        "-U",
        user,
        "-c",
        command,
    ]
    result = subprocess.run(docker_command, capture_output=True, text=True)
    return result


def generate_unique_string(length=8):
    """Generate a random string of letters and digits."""
    return "".join(random.choices(string.ascii_letters + string.digits, k=length))


def init_container():
    """Initialize the PostgreSQL Docker container with persistent storage and port forwarding."""
    # Check if the container already exists
    container_check = subprocess.run(
        ["docker", "ps", "-a", "-q", "-f", f"name={DOCKER_CONTAINER_NAME}"],
        capture_output=True,
        text=True,
    )
    if container_check.stdout.strip():
        print(f"Container '{DOCKER_CONTAINER_NAME}' already exists.")
        return

    try:
        print(
            f"Initializing PostgreSQL container '{DOCKER_CONTAINER_NAME}' with persistent storage and port forwarding..."
        )

        # Create the container with volume persistence and port forwarding
        subprocess.run(
            [
                "docker",
                "run",
                "--name",
                DOCKER_CONTAINER_NAME,
                "-e",
                "POSTGRES_USER=postgres",
                "-e",
                "POSTGRES_PASSWORD=postgres",
                "-v",
                f"{DOCKER_VOLUME_NAME}:/var/lib/postgresql/data",
                "-p",
                "5432:5432",  # Port forwarding from container to host
                "-d",
                "postgres",
            ],
            check=True,
        )

        print(
            f"Container '{DOCKER_CONTAINER_NAME}' created successfully with port 5432 forwarded to localhost."
        )

    except subprocess.CalledProcessError as e:
        print(f"Error encountered while creating the container: {e}")

        # Clean up the container and volume if an error occurred
        print("Cleaning up any created resources...")

        # Stop and remove the container if it exists
        subprocess.run(["docker", "rm", "-f", DOCKER_CONTAINER_NAME])

        # Remove the volume if it exists
        subprocess.run(["docker", "volume", "rm", "-f", DOCKER_VOLUME_NAME])

        print("Cleanup complete. Please try running the command again.")


def create_database(db_name, user=None, password=None):
    """Create a database with a unique user and password."""
    if not user:
        user = "u_" + generate_unique_string()
    if not password:
        password = generate_unique_string(length=16)

    print(f"Creating database '{db_name}' with user '{user}' and password '{password}'")

    # Create the database
    result = run_docker_psql_command(f"CREATE DATABASE {db_name};")
    if result.returncode != 0:
        print(f"Error creating database: {result.stderr}")
        return

    # Create the user
    result = run_docker_psql_command(f"CREATE USER {user} WITH PASSWORD '{password}';")
    if result.returncode != 0:
        print(f"Error creating user: {result.stderr}")
        return

    # Grant privileges to the user on the new database
    result = run_docker_psql_command(
        f"GRANT ALL PRIVILEGES ON DATABASE {db_name} TO {user};"
    )
    if result.returncode != 0:
        print(f"Error granting privileges: {result.stderr}")
        return

    print(
        f"Database '{db_name}' created successfully with user '{user}' and password '{password}'."
    )


def delete_database(db_name, user=None):
    """Delete a database and optionally a user."""
    print(f"Deleting database '{db_name}'")

    # Drop the database
    result = run_docker_psql_command(f"DROP DATABASE IF EXISTS {db_name};")
    if result.returncode != 0:
        print(f"Error deleting database: {result.stderr}")
        return

    if user:
        print(f"Deleting user '{user}'")
        result = run_docker_psql_command(f"DROP USER IF EXISTS {user};")
        if result.returncode != 0:
            print(f"Error deleting user: {result.stderr}")
            return

    print(
        f"Database '{db_name}' and user '{user}' (if specified) deleted successfully."
    )


def main():
    parser = argparse.ArgumentParser(
        description="CLI to manage PostgreSQL databases in Docker"
    )
    subparsers = parser.add_subparsers(dest="command")

    # Init command
    subparsers.add_parser(
        "init", help="Initialize PostgreSQL Docker container with persistent storage"
    )

    # Create database
    create_parser = subparsers.add_parser(
        "create", help="Create a new database with user and password"
    )
    create_parser.add_argument("db_name", help="Name of the database to create")
    create_parser.add_argument("--user", help="Username for the database (optional)")
    create_parser.add_argument(
        "--password", help="Password for the database (optional)"
    )

    # Delete database
    delete_parser = subparsers.add_parser("delete", help="Delete a database and user")
    delete_parser.add_argument("db_name", help="Name of the database to delete")
    delete_parser.add_argument("--user", help="Username to delete (optional)")

    args = parser.parse_args()

    # Determine the command to run
    if args.command == "init":
        init_container()
    elif args.command == "create":
        create_database(args.db_name, args.user, args.password)
    elif args.command == "delete":
        delete_database(args.db_name, args.user)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
